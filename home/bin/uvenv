# uvenv.sh: Robust uv wrapper for centralized project venvs

UVENV_HOME="${HOME}/venvs"

# Check and install uv if not present
ensure_uv_installed() {
    if ! command -v uv &>/dev/null; then
        echo "uv not found. Installing uv..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        
        # Source the shell configuration to update PATH
        if [ -f "$HOME/.cargo/env" ]; then
            source "$HOME/.cargo/env"
        fi
        
        # Verify installation
        if ! command -v uv &>/dev/null; then
            echo "Error: Failed to install uv. Please install manually."
            return 1
        fi
        
        echo "uv installed successfully!"
    fi
}

uvenv() {
    # Ensure uv is installed before proceeding
    ensure_uv_installed || return 1
    usage() {
        echo "Usage: uvenv <command> [options]"
        echo "Commands:"
        echo "  create [--python <version>]   Create venv for current directory (optionally with Python version)"
        echo "  activate [--python <version>] Activate venv for current directory"
        echo "  deactivate                    Deactivate currently active venv"
        echo "  remove [--python <version>]   Remove venv for current directory"
        echo "  show [--python <version>]     Show path to venv for current directory"
        echo "  help                          Show this message"
    }

    project_name() {
        basename "$PWD"
    }

    venv_path() {
        local version="$1"
        echo "${UVENV_HOME}/$(project_name)/${version}"
    }

    detect_python_version() {
        python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")'
    }

    parse_python_arg() {
        local python_version=""
        while [[ $# -gt 0 ]]; do
            case "$1" in
                --python)
                    shift
                    python_version="$1"
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    return 1
                    ;;
            esac
            shift
        done

        if [ -n "$python_version" ]; then
            echo "$python_version"
        else
            detect_python_version
        fi
    }

    create_venv() {
        local python_version
        python_version=$(parse_python_arg "$@") || return 1
        local venv
        venv=$(venv_path "$python_version")

        if [ -d "$venv" ]; then
            echo "Venv already exists: $venv"
            return 1
        fi

        mkdir -p "$(dirname "$venv")"
        uv venv "$venv" --python "python${python_version}"

        # Point `.venv` to this specific version
        ln -sfn "$venv" .venv
        echo "Created venv at $venv and linked .venv"
    }

    activate_venv() {
        local python_version
        python_version=$(parse_python_arg "$@") || return 1
        local venv
        venv=$(venv_path "$python_version")

        if [ ! -d "$venv" ]; then
            echo "Venv does not exist: $venv"
            return 1
        fi

        # shellcheck source=/dev/null
        source "$venv/bin/activate"
        echo "Activated venv: $venv"
    }

    deactivate_venv() {
        if declare -F deactivate >/dev/null; then
            local active="$VIRTUAL_ENV"
            deactivate
            echo "Deactivated venv: $active"
        else
            echo "No virtual environment is currently active"
            return 1
        fi
    }

    remove_venv() {
        local python_version
        python_version=$(parse_python_arg "$@") || return 1
        local venv
        venv=$(venv_path "$python_version")

        if [ ! -d "$venv" ]; then
            echo "Venv does not exist: $venv"
            return 1
        fi

        rm -rf "$venv"
        # Only remove `.venv` if it points to this venv
        if [ "$(readlink .venv 2>/dev/null)" = "$venv" ]; then
            rm -f .venv
        fi
        echo "Removed venv: $venv"
    }

    show_venv() {
        local python_version
        python_version=$(parse_python_arg "$@") || return 1
        venv_path "$python_version"
    }

    case "$1" in
        create) shift; create_venv "$@" ;;
        activate) shift; activate_venv "$@" ;;
        deactivate) deactivate_venv ;;
        remove) shift; remove_venv "$@" ;;
        show) shift; show_venv "$@" ;;
        help|*) usage ;;
    esac
}
